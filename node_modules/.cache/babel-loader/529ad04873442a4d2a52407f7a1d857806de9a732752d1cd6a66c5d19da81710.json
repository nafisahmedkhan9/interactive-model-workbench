{"ast":null,"code":"var _jsxFileName = \"/home/nafis/code/reactjs/interactive-model-workbench/src/components/NotebookArea.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { useNotebookStore } from '../store/notebookStore';\nimport SortableCell from './SortableCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotebookArea = ({\n  notebook\n}) => {\n  _s();\n  const {\n    addCell,\n    reorderCells\n  } = useNotebookStore();\n  const parentRef = React.useRef(null);\n  const [cellHeights, setCellHeights] = useState(new Map());\n\n  // Calculate dynamic cell height based on content\n  const getCellHeight = cell => {\n    const baseHeight = 120; // Header + padding\n    const contentHeight = cell.content ? Math.max(100, cell.content.split('\\n').length * 20) : 100;\n    const outputHeight = cell.output.length > 0 ? cell.output.length * 80 : 0;\n    return baseHeight + contentHeight + outputHeight;\n  };\n  const virtualizer = useVirtualizer({\n    count: notebook.cells.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: index => {\n      const cell = notebook.cells[index];\n      return getCellHeight(cell);\n    },\n    overscan: 5\n  });\n\n  // Update virtualizer when cells change\n  useEffect(() => {\n    virtualizer.measure();\n  }, [notebook.cells, virtualizer]);\n  const handleDragEnd = event => {\n    console.log('Drag end event:', event);\n    const {\n      active,\n      over\n    } = event;\n    if (over && active.id !== over.id) {\n      const oldIndex = notebook.cells.findIndex(cell => cell.id === active.id);\n      const newIndex = notebook.cells.findIndex(cell => cell.id === over.id);\n      console.log('Reordering cells:', {\n        oldIndex,\n        newIndex,\n        activeId: active.id,\n        overId: over.id\n      });\n      if (oldIndex !== -1 && newIndex !== -1) {\n        reorderCells(notebook.id, oldIndex, newIndex);\n      }\n    }\n  };\n  const handleAddCell = () => {\n    addCell(notebook.id, {\n      type: 'code',\n      content: '',\n      output: [],\n      status: 'idle'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between p-4 border-b border-gray-200 bg-white\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-xl font-semibold text-gray-900\",\n          children: notebook.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500\",\n          children: [notebook.cells.length, \" cells \\u2022 Last updated \", notebook.updatedAt.toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator status-${notebook.kernelStatus}`,\n          children: [\"Kernel: \", notebook.kernelStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddCell,\n          className: \"btn btn-primary\",\n          children: \"+ Add Cell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(DndContext, {\n        collisionDetection: closestCenter,\n        onDragEnd: handleDragEnd,\n        children: /*#__PURE__*/_jsxDEV(SortableContext, {\n          items: notebook.cells.map(cell => cell.id),\n          strategy: verticalListSortingStrategy,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: parentRef,\n            className: \"h-full overflow-auto p-4\",\n            style: {\n              height: '100%',\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                height: `${virtualizer.getTotalSize()}px`,\n                width: '100%',\n                position: 'relative'\n              },\n              children: virtualizer.getVirtualItems().map(virtualRow => {\n                const cell = notebook.cells[virtualRow.index];\n                const cellHeight = getCellHeight(cell);\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: `${cellHeight}px`,\n                    transform: `translateY(${virtualRow.start}px)`\n                  },\n                  children: /*#__PURE__*/_jsxDEV(SortableCell, {\n                    cell: cell,\n                    notebookId: notebook.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 23\n                  }, this)\n                }, cell.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(NotebookArea, \"M/9lbhzVTAKiwQYZ1HVplLhQ8AE=\", false, function () {\n  return [useNotebookStore, useVirtualizer];\n});\n_c = NotebookArea;\nexport default NotebookArea;\nvar _c;\n$RefreshReg$(_c, \"NotebookArea\");","map":{"version":3,"names":["React","useState","useEffect","DndContext","closestCenter","SortableContext","verticalListSortingStrategy","useVirtualizer","useNotebookStore","SortableCell","jsxDEV","_jsxDEV","NotebookArea","notebook","_s","addCell","reorderCells","parentRef","useRef","cellHeights","setCellHeights","Map","getCellHeight","cell","baseHeight","contentHeight","content","Math","max","split","length","outputHeight","output","virtualizer","count","cells","getScrollElement","current","estimateSize","index","overscan","measure","handleDragEnd","event","console","log","active","over","id","oldIndex","findIndex","newIndex","activeId","overId","handleAddCell","type","status","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","updatedAt","toLocaleDateString","kernelStatus","onClick","collisionDetection","onDragEnd","items","map","strategy","ref","style","height","width","getTotalSize","position","getVirtualItems","virtualRow","cellHeight","top","left","transform","start","notebookId","_c","$RefreshReg$"],"sources":["/home/nafis/code/reactjs/interactive-model-workbench/src/components/NotebookArea.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { DndContext, DragEndEvent, closestCenter } from '@dnd-kit/core';\nimport { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { useNotebookStore } from '../store/notebookStore';\nimport { Notebook } from '../types';\nimport SortableCell from './SortableCell';\n\ninterface NotebookAreaProps {\n  notebook: Notebook;\n}\n\nconst NotebookArea: React.FC<NotebookAreaProps> = ({ notebook }) => {\n  const { addCell, reorderCells } = useNotebookStore();\n  const parentRef = React.useRef<HTMLDivElement>(null);\n  const [cellHeights, setCellHeights] = useState<Map<string, number>>(new Map());\n\n  // Calculate dynamic cell height based on content\n  const getCellHeight = (cell: any) => {\n    const baseHeight = 120; // Header + padding\n    const contentHeight = cell.content ? Math.max(100, cell.content.split('\\n').length * 20) : 100;\n    const outputHeight = cell.output.length > 0 ? cell.output.length * 80 : 0;\n    return baseHeight + contentHeight + outputHeight;\n  };\n\n  const virtualizer = useVirtualizer({\n    count: notebook.cells.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (index) => {\n      const cell = notebook.cells[index];\n      return getCellHeight(cell);\n    },\n    overscan: 5,\n  });\n\n  // Update virtualizer when cells change\n  useEffect(() => {\n    virtualizer.measure();\n  }, [notebook.cells, virtualizer]);\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    console.log('Drag end event:', event);\n    const { active, over } = event;\n    \n    if (over && active.id !== over.id) {\n      const oldIndex = notebook.cells.findIndex(cell => cell.id === active.id);\n      const newIndex = notebook.cells.findIndex(cell => cell.id === over.id);\n      \n      console.log('Reordering cells:', { oldIndex, newIndex, activeId: active.id, overId: over.id });\n      \n      if (oldIndex !== -1 && newIndex !== -1) {\n        reorderCells(notebook.id, oldIndex, newIndex);\n      }\n    }\n  };\n\n  const handleAddCell = () => {\n    addCell(notebook.id, {\n      type: 'code',\n      content: '',\n      output: [],\n      status: 'idle',\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200 bg-white\">\n        <div>\n          <h1 className=\"text-xl font-semibold text-gray-900\">{notebook.name}</h1>\n          <p className=\"text-sm text-gray-500\">\n            {notebook.cells.length} cells • Last updated {notebook.updatedAt.toLocaleDateString()}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className={`status-indicator status-${notebook.kernelStatus}`}>\n            Kernel: {notebook.kernelStatus}\n          </span>\n          <button\n            onClick={handleAddCell}\n            className=\"btn btn-primary\"\n          >\n            + Add Cell\n          </button>\n        </div>\n      </div>\n\n      {/* Cells Container */}\n      <div className=\"flex-1 overflow-hidden\">\n        <DndContext\n          collisionDetection={closestCenter}\n          onDragEnd={handleDragEnd}\n        >\n          <SortableContext\n            items={notebook.cells.map(cell => cell.id)}\n            strategy={verticalListSortingStrategy}\n          >\n            <div\n              ref={parentRef}\n              className=\"h-full overflow-auto p-4\"\n              style={{\n                height: '100%',\n                width: '100%',\n              }}\n            >\n              <div\n                style={{\n                  height: `${virtualizer.getTotalSize()}px`,\n                  width: '100%',\n                  position: 'relative',\n                }}\n              >\n                {virtualizer.getVirtualItems().map((virtualRow) => {\n                  const cell = notebook.cells[virtualRow.index];\n                  const cellHeight = getCellHeight(cell);\n                  \n                  return (\n                    <div\n                      key={cell.id}\n                      style={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        width: '100%',\n                        height: `${cellHeight}px`,\n                        transform: `translateY(${virtualRow.start}px)`,\n                      }}\n                    >\n                      <SortableCell cell={cell} notebookId={notebook.id} />\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </SortableContext>\n        </DndContext>\n      </div>\n    </div>\n  );\n};\n\nexport default NotebookArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}