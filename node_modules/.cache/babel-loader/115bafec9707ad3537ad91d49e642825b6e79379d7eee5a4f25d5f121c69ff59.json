{"ast":null,"code":"// Dummy API functions for development\n// In production, these would connect to actual Jupyter backend\n\n// Mock WebSocket interface for development\n\nexport const apiService = {\n  // Notebook management\n  async createNotebook(request) {\n    // Dummy implementation\n    const notebook = {\n      id: Math.random().toString(36).substr(2, 9),\n      name: request.name,\n      cells: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      kernelStatus: 'idle'\n    };\n    return {\n      data: notebook,\n      status: 201,\n      message: 'Notebook created successfully'\n    };\n  },\n  async getNotebooks() {\n    // Dummy implementation\n    const notebooks = [{\n      id: '1',\n      name: 'Sample Analysis',\n      cells: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      kernelStatus: 'idle'\n    }, {\n      id: '2',\n      name: 'Model Training',\n      cells: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      kernelStatus: 'idle'\n    }];\n    return {\n      data: notebooks,\n      status: 200\n    };\n  },\n  async getNotebook(id) {\n    // Dummy implementation\n    const notebook = {\n      id,\n      name: `Notebook ${id}`,\n      cells: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      kernelStatus: 'idle'\n    };\n    return {\n      data: notebook,\n      status: 200\n    };\n  },\n  async deleteNotebook(id) {\n    // Dummy implementation\n    return {\n      data: undefined,\n      status: 204,\n      message: 'Notebook deleted successfully'\n    };\n  },\n  // Kernel management\n  async startKernel(notebookId) {\n    // Dummy implementation\n    const kernel = {\n      id: Math.random().toString(36).substr(2, 9),\n      name: 'python3',\n      status: 'idle'\n    };\n    return {\n      data: kernel,\n      status: 200,\n      message: 'Kernel started successfully'\n    };\n  },\n  async getKernels() {\n    // Dummy implementation\n    const kernels = [{\n      id: '1',\n      name: 'python3',\n      status: 'idle'\n    }, {\n      id: '2',\n      name: 'python3',\n      status: 'busy'\n    }];\n    return {\n      data: kernels,\n      status: 200\n    };\n  },\n  // Cell execution\n  async executeCell(request) {\n    // Dummy implementation - in real implementation, this would send code to Jupyter\n    return {\n      data: undefined,\n      status: 200,\n      message: 'Cell execution started'\n    };\n  },\n  async updateCell(request) {\n    // Dummy implementation\n    return {\n      data: undefined,\n      status: 200,\n      message: 'Cell updated successfully'\n    };\n  },\n  // WebSocket connection\n  createWebSocketConnection(notebookId, kernelId) {\n    // Dummy WebSocket - in production, this would connect to Jupyter's WebSocket endpoint\n\n    // For demo purposes, create a mock WebSocket that simulates real-time output\n    const mockWebSocket = {\n      readyState: WebSocket.CONNECTING,\n      send: data => {\n        // Simulate sending data\n        console.log('WebSocket send:', data);\n      },\n      close: () => {\n        // In a real implementation, this would close the WebSocket\n        console.log('WebSocket closed');\n      },\n      addEventListener: (event, handler) => {\n        // Simulate WebSocket events\n        if (event === 'open') {\n          setTimeout(() => {\n            handler(new Event('open'));\n          }, 100);\n        }\n      },\n      removeEventListener: () => {}\n    };\n    return mockWebSocket;\n  }\n};\n\n// Helper function to simulate real-time output\nexport const simulateCellExecution = (cellId, code, onOutput) => {\n  // Simulate execution time\n  setTimeout(() => {\n    // Simulate stdout\n    onOutput({\n      type: 'stream',\n      content: `Executing: ${code}\\n`,\n      cellId,\n      timestamp: Date.now()\n    });\n\n    // Simulate execution result\n    setTimeout(() => {\n      onOutput({\n        type: 'execute_result',\n        content: `Output: ${code.length} characters processed\\n`,\n        cellId,\n        timestamp: Date.now()\n      });\n    }, 500);\n  }, 100);\n};","map":{"version":3,"names":["apiService","createNotebook","request","notebook","id","Math","random","toString","substr","name","cells","createdAt","Date","updatedAt","kernelStatus","data","status","message","getNotebooks","notebooks","getNotebook","deleteNotebook","undefined","startKernel","notebookId","kernel","getKernels","kernels","executeCell","updateCell","createWebSocketConnection","kernelId","mockWebSocket","readyState","WebSocket","CONNECTING","send","console","log","close","addEventListener","event","handler","setTimeout","Event","removeEventListener","simulateCellExecution","cellId","code","onOutput","type","content","timestamp","now","length"],"sources":["/home/nafis/code/reactjs/interactive-model-workbench/src/services/api.ts"],"sourcesContent":["import { \n  ApiResponse, \n  Notebook, \n  JupyterKernel, \n  CreateNotebookRequest, \n  ExecuteCellRequest, \n  UpdateCellRequest \n} from '../types';\n\n// Dummy API functions for development\n// In production, these would connect to actual Jupyter backend\n\n// Mock WebSocket interface for development\ninterface MockWebSocket {\n  readyState: number;\n  send: (data: string) => void;\n  close: () => void;\n  addEventListener: (event: string, handler: EventListener) => void;\n  removeEventListener: () => void;\n}\n\nexport const apiService = {\n  // Notebook management\n  async createNotebook(request: CreateNotebookRequest): Promise<ApiResponse<Notebook>> {\n    // Dummy implementation\n    const notebook: Notebook = {\n      id: Math.random().toString(36).substr(2, 9),\n      name: request.name,\n      cells: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      kernelStatus: 'idle',\n    };\n    \n    return {\n      data: notebook,\n      status: 201,\n      message: 'Notebook created successfully',\n    };\n  },\n\n  async getNotebooks(): Promise<ApiResponse<Notebook[]>> {\n    // Dummy implementation\n    const notebooks: Notebook[] = [\n      {\n        id: '1',\n        name: 'Sample Analysis',\n        cells: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        kernelStatus: 'idle',\n      },\n      {\n        id: '2',\n        name: 'Model Training',\n        cells: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        kernelStatus: 'idle',\n      },\n    ];\n    \n    return {\n      data: notebooks,\n      status: 200,\n    };\n  },\n\n  async getNotebook(id: string): Promise<ApiResponse<Notebook>> {\n    // Dummy implementation\n    const notebook: Notebook = {\n      id,\n      name: `Notebook ${id}`,\n      cells: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      kernelStatus: 'idle',\n    };\n    \n    return {\n      data: notebook,\n      status: 200,\n    };\n  },\n\n  async deleteNotebook(id: string): Promise<ApiResponse<void>> {\n    // Dummy implementation\n    return {\n      data: undefined,\n      status: 204,\n      message: 'Notebook deleted successfully',\n    };\n  },\n\n  // Kernel management\n  async startKernel(notebookId: string): Promise<ApiResponse<JupyterKernel>> {\n    // Dummy implementation\n    const kernel: JupyterKernel = {\n      id: Math.random().toString(36).substr(2, 9),\n      name: 'python3',\n      status: 'idle',\n    };\n    \n    return {\n      data: kernel,\n      status: 200,\n      message: 'Kernel started successfully',\n    };\n  },\n\n  async getKernels(): Promise<ApiResponse<JupyterKernel[]>> {\n    // Dummy implementation\n    const kernels: JupyterKernel[] = [\n      {\n        id: '1',\n        name: 'python3',\n        status: 'idle',\n      },\n      {\n        id: '2',\n        name: 'python3',\n        status: 'busy',\n      },\n    ];\n    \n    return {\n      data: kernels,\n      status: 200,\n    };\n  },\n\n  // Cell execution\n  async executeCell(request: ExecuteCellRequest): Promise<ApiResponse<void>> {\n    // Dummy implementation - in real implementation, this would send code to Jupyter\n    return {\n      data: undefined,\n      status: 200,\n      message: 'Cell execution started',\n    };\n  },\n\n  async updateCell(request: UpdateCellRequest): Promise<ApiResponse<void>> {\n    // Dummy implementation\n    return {\n      data: undefined,\n      status: 200,\n      message: 'Cell updated successfully',\n    };\n  },\n\n  // WebSocket connection\n  createWebSocketConnection(notebookId: string, kernelId: string): MockWebSocket {\n    // Dummy WebSocket - in production, this would connect to Jupyter's WebSocket endpoint\n    \n    // For demo purposes, create a mock WebSocket that simulates real-time output\n    const mockWebSocket: MockWebSocket = {\n      readyState: WebSocket.CONNECTING,\n      send: (data: string) => {\n        // Simulate sending data\n        console.log('WebSocket send:', data);\n      },\n      close: () => {\n        // In a real implementation, this would close the WebSocket\n        console.log('WebSocket closed');\n      },\n      addEventListener: (event: string, handler: EventListener) => {\n        // Simulate WebSocket events\n        if (event === 'open') {\n          setTimeout(() => {\n            handler(new Event('open'));\n          }, 100);\n        }\n      },\n      removeEventListener: () => {},\n    };\n\n    return mockWebSocket;\n  },\n};\n\n// Helper function to simulate real-time output\nexport const simulateCellExecution = (\n  cellId: string, \n  code: string, \n  onOutput: (output: any) => void\n) => {\n  // Simulate execution time\n  setTimeout(() => {\n    // Simulate stdout\n    onOutput({\n      type: 'stream',\n      content: `Executing: ${code}\\n`,\n      cellId,\n      timestamp: Date.now(),\n    });\n\n    // Simulate execution result\n    setTimeout(() => {\n      onOutput({\n        type: 'execute_result',\n        content: `Output: ${code.length} characters processed\\n`,\n        cellId,\n        timestamp: Date.now(),\n      });\n    }, 500);\n  }, 100);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}